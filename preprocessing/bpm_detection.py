# Copyright 2012 Free Software Foundation, Inc.
#
# This file is part of The BPM Detector Python
#
# The BPM Detector Python is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# The BPM Detector Python is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The BPM Detector Python; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

import wave, array, math, time, argparse, sys
import numpy, pywt
from scipy import signal
import pdb
import matplotlib.pyplot as plt


def read_wav(filename):
    # open file, get metadata for audio
    try:
        wf = wave.open(filename, 'rb')
    except IOError as e:
        print(e)
        return

    # typ = choose_type( wf.getsampwidth() ) #TODO: implement choose_type
    nsamps = wf.getnframes();
    assert (nsamps > 0);

    fs = wf.getframerate()
    assert (fs > 0)

    # read entire file and make into an array
    samps = list(array.array('i', wf.readframes(nsamps)))
    # print 'Read', nsamps,'samples from', filename
    try:
        assert (nsamps == len(samps))
    except AssertionError as e:
        print(nsamps, "not equal to", len(samps))

    return samps, fs


# print an error when no data can be found
def no_audio_data():
    print("No audio data for sample, skipping...")
    return None, None


# simple peak detection
def peak_detect(data):
    max_val = numpy.amax(abs(data))
    peak_ndx = numpy.where(data == max_val)
    if len(peak_ndx[0]) == 0:  # if nothing found then the max must be negative
        peak_ndx = numpy.where(data == -max_val)
    return peak_ndx


def bpm_detector(data, fs):
    cA = []
    cD = []
    correl = []
    cD_sum = []
    levels = 4
    max_decimation = 2 ** (levels - 1)
    min_ndx = 60. / 220 * (fs / max_decimation)
    max_ndx = 60. / 40 * (fs / max_decimation)

    for loop in range(0, levels):
        cD = []
        # 1) DWT
        if loop == 0:
            [cA, cD] = pywt.dwt(data, 'db4')
            cD_minlen = len(cD) // max_decimation + 1
            cD_sum = numpy.zeros(cD_minlen)
        else:
            [cA, cD] = pywt.dwt(cA, 'db4')
        # 2) Filter
        cD = signal.lfilter([0.01], [1 - 0.99], cD)

        # 4) Subtractargs.filename out the mean.

        # 5) Decimate for reconstruction later.
        cD = abs(cD[::(2 ** (levels - loop - 1))])
        cD = cD - numpy.mean(cD)
        # 6) Recombine the signal before ACF
        #    essentially, each level I concatenate 
        #    the detail coefs (i.e. the HPF values)
        #    to the beginning of the array
        cD_sum = cD[0:cD_minlen] + cD_sum

    if [b for b in cA if b != 0.0] == []:
        return no_audio_data()
    # adding in the approximate data as well...    
    cA = signal.lfilter([0.01], [1 - 0.99], cA)
    cA = abs(cA)
    cA = cA - numpy.mean(cA)
    cD_sum = cA[0:cD_minlen] + cD_sum

    # ACF
    correl = numpy.correlate(cD_sum, cD_sum, 'full')

    midpoint = len(correl) // 2
    correl_midpoint_tmp = correl[midpoint:]
    peak_ndx = peak_detect(correl_midpoint_tmp[int(min_ndx):int(max_ndx)])
    if len(peak_ndx) > 1:
        return no_audio_data()

    peak_ndx_adjusted = peak_ndx[0] + min_ndx
    bpm = 60. / peak_ndx_adjusted * (fs / max_decimation)
    print(bpm)
    return bpm, correl


def get_bpms(samps, fs, window):
    data = []
    correl = []
    bpm = 0
    n = 0
    nsamps = len(samps)
    window_samps = int(window * fs)
    samps_ndx = 0  # first sample in window_ndx
    max_window_ndx = nsamps // window_samps
    print("Max window index: " + str(max_window_ndx))
    bpms = numpy.zeros(max_window_ndx)

    # iterate through all windows
    for window_ndx in range(0, max_window_ndx):

        # get a new set of samples
        # print n,":",len(bpms),":",max_window_ndx,":",fs,":",nsamps,":",samps_ndx
        data = samps[samps_ndx:samps_ndx + window_samps]
        if not ((len(data) % window_samps) == 0):
            raise AssertionError(str(len(data)))

        bpm, correl_temp = bpm_detector(data, fs)
        if bpm == None:
            continue
        bpms[window_ndx] = bpm
        correl = correl_temp

        # iterate at the end of the loop
        samps_ndx = samps_ndx + window_samps
        n = n + 1  # counter for debug...

    return bpms


def processBPMS(bpmsForTime):
    differentThreshold = 3
    stdThreshold = 5

    for time in list(bpmsForTime.keys()):
        bpms = bpmsForTime[time]

        if len(bpms) == 0:
            bpmsForTime.pop(time)
            continue

        bpms.sort()
        print("Calc bpms for time " + str(time))
        # Now we have a range of possible bpms for a given time.
        # We need to check if they are multiples of each other
        # to avoid discarding valid bpm values
        maxBPM = max(bpms)
        currMin = bpms[0]
        bestSTD = stdThreshold
        bestBPMs = None
        while currMin < maxBPM:
            bpmSTD = numpy.std(bpms)
            if (bpmSTD < bestSTD):
                bestSTD = bpmSTD
                bestBPMs = bpms.copy()

            # print("Standard deviation of bpms: " + str(bpmSTD))

            for i in range(0, len(bpms)):
                if (bpms[i] - currMin > differentThreshold):
                    continue
                bpms[i] *= 2

            bpms.sort()
            currMin = bpms[0]

        print("Best STD: " + str(bestSTD))
        print("Best BPMS: " + str(bestBPMs))

        if bestBPMs == None or len(bestBPMs) == 0:
            bpmsForTime.pop(time)
            continue

        avgBPM = numpy.average(bestBPMs)
        medianBPM = numpy.median(bestBPMs)
        difference = medianBPM - avgBPM
        while abs(difference) > differentThreshold:
            if difference > 0:
                bestBPMs.pop(0)
            else:
                bestBPMs.pop(len(bestBPMs) - 1)

            print(bestBPMs)

            avgBPM = numpy.average(bestBPMs)
            medianBPM = numpy.median(bestBPMs)
            difference = medianBPM - avgBPM

        bestBPM = numpy.median(bestBPMs)
        bpmsForTime[time] = bestBPM

    for time in bpmsForTime:
        print(str(time) + ": " + str(bpmsForTime[time]))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process .wav file to determine the Beats Per Minute.')
    parser.add_argument('--filename', required=True,
                        help='.wav file for processing')

    args = parser.parse_args()
    samps, fs = read_wav(args.filename)
    print(len(samps))
    print(fs)
    bpmsForTime = {}

    # test = {0: [195.5470156674102, 218.54632827751917, 198.3616389063054, 198.83863915835497, 198.0053879017116,
    # 194.97065995016214], 5: [213.8826019223421, 218.54632827751917, 198.3616389063054, 198.83863915835497,
    # 198.0053879017116, 194.97065995016214], 10: [193.03621169916434, 195.20079405531564, 198.3616389063054,
    # 198.83863915835497, 198.0053879017116, 194.97065995016214], 15: [194.97065995016214, 195.20079405531564,
    # 49.02608121492242, 198.83863915835497, 198.0053879017116, 194.97065995016214], 20: [179.91099023365064,
    # 196.3596621421054, 49.02608121492242, 97.72754744349088, 198.0053879017116, 194.97065995016214],
    # 25: [57.37795405978694, 196.3596621421054, 49.02608121492242, 97.72754744349088, 65.28292407209698,
    # 194.97065995016214], 30: [97.46835443037975, 65.27004117219666, 65.27004117219666, 97.72754744349088,
    # 65.28292407209698, 49.00428993783967], 35: [193.37479071992348, 65.27004117219666, 65.27004117219666,
    # 97.72754744349088, 65.28292407209698, 49.00428993783967], 40: [194.28350198915976, 194.51201582506886,
    # 65.27004117219666, 130.65845468747196, 65.28292407209698, 49.00428993783967], 45: [201.381009049899,
    # 194.51201582506886, 129.8378031154649, 130.65845468747196, 65.28292407209698, 49.00428993783967],
    # 50: [129.9908891151723, 129.78685454383304, 129.8378031154649, 130.65845468747196, 129.9908891151723,
    # 49.00428993783967], 55: [196.3596621421054, 129.78685454383304, 129.8378031154649, 130.65845468747196,
    # 129.9908891151723, 49.00428993783967], 60: [130.65845468747196, 48.98977317866304, 49.011551544134974,
    # 49.011551544134974, 129.9908891151723, 49.011551544134974], 65: [129.53271028037383, 48.98977317866304,
    # 49.011551544134974, 49.011551544134974, 129.9908891151723, 49.011551544134974], 70: [129.68507726033258,
    # 130.65845468747196, 49.011551544134974, 49.011551544134974, 129.9908891151723, 49.011551544134974],
    # 75: [130.7100899962277, 130.65845468747196, 130.45232076587962, 49.011551544134974, 49.09157148350796,
    # 49.011551544134974], 80: [130.29814665592264, 130.04199803413456, 130.45232076587962, 49.011551544134974,
    # 49.09157148350796, 49.011551544134974], 85: [98.04621707202047, 130.04199803413456, 130.45232076587962,
    # 49.011551544134974, 49.09157148350796, 49.011551544134974], 90: [98.162612813145, 78.36918006655968,
    # 49.011551544134974, 49.011551544134974, 49.09157148350796, 49.011551544134974], 95: [78.38775356307971,
    # 78.36918006655968, 49.011551544134974, 49.011551544134974, 49.09157148350796, 49.011551544134974],
    # 100: [194.1694462975317, 194.1694462975317, 49.011551544134974, 129.482000818549, 129.58345947678663,
    # 49.011551544134974], 105: [202.24297506879017, 194.1694462975317, 129.53271028037383, 129.482000818549,
    # 129.58345947678663, 49.011551544134974], 110: [128.47608453837597, 128.47608453837597, 129.53271028037383,
    # 129.482000818549, 129.58345947678663, 49.011551544134974], 115: [49.12073446518379, 128.47608453837597,
    # 129.53271028037383, 129.482000818549, 129.58345947678663, 49.011551544134974], 120: [130.55530636045575,
    # 48.96076544721738, 48.96076544721738, 49.06244310941198, 129.58345947678663, 49.06244310941198],
    # 125: [197.65041423332883, 48.96076544721738, 48.96076544721738, 49.06244310941198, 49.06244310941198,
    # 49.06244310941198], 130: [144.97619095056882, 49.13532895314368, 48.96076544721738, 49.06244310941198,
    # 49.06244310941198, 49.06244310941198], 135: [79.3468186031296, 49.13532895314368, 49.06244310941198,
    # 49.06244310941198, 49.06244310941198, 49.06244310941198], 140: [49.12073446518379, 48.95351888106242,
    # 49.06244310941198, 48.946274459683984, 49.06244310941198, 49.06244310941198], 145: [48.98251802387027,
    # 48.95351888106242, 49.06244310941198, 48.946274459683984, 49.06244310941198, 49.06244310941198],
    # 150: [192.36259814418275, 197.41447136384602, 196.71001054310508, 48.946274459683984, 48.98977317866304,
    # 48.98977317866304], 155: [195.20079405531564, 197.41447136384602, 196.71001054310508, 48.946274459683984,
    # 48.98977317866304, 48.98977317866304], 160: [196.24315650368135, 48.96076544721738, 196.71001054310508,
    # 48.98251802387027, 48.98977317866304, 48.98977317866304], 165: [97.95910125065629, 48.96076544721738,
    # 49.00428993783967, 48.98251802387027, 48.98977317866304, 48.98977317866304], 170: [195.77851319719105,
    # 49.011551544134974, 49.00428993783967, 48.98251802387027, 48.98977317866304, 48.98977317866304],
    # 175: [65.65875314690993, 49.011551544134974, 49.00428993783967, 48.98251802387027, 130.04199803413456,
    # 48.98977317866304], 180: [129.9398203539349, 129.9398203539349, 131.48954625128752, 130.55530636045575,
    # 130.04199803413456, 48.8739479994358], 185: [129.88879170311134, 129.9398203539349, 131.48954625128752,
    # 130.55530636045575, 130.04199803413456, 48.8739479994358], 190: [198.3616389063054, 195.77851319719105,
    # 131.48954625128752, 130.55530636045575, 130.04199803413456, 48.8739479994358], 195: [195.77851319719105,
    # 195.77851319719105, 193.9417361869986, 130.55530636045575, 130.04199803413456, 48.8739479994358],
    # 200: [49.09157148350796, 49.09157148350796, 193.9417361869986, 193.9417361869986, 48.98977317866304,
    # 48.8739479994358], 205: [195.66269595848237, 49.09157148350796, 193.9417361869986, 193.9417361869986,
    # 48.98977317866304, 48.8739479994358], 210: [57.37795405978694, 194.05552444195538, 194.1694462975317,
    # 193.9417361869986, 48.98977317866304, 48.946274459683984], 215: [194.05552444195538, 194.05552444195538,
    # 194.1694462975317, 193.9417361869986, 48.98977317866304, 48.946274459683984], 220: [98.6898319567075,
    # 49.02608121492242, 194.1694462975317, 48.946274459683984, 48.98977317866304, 48.946274459683984],
    # 225: [199.19789756084208, 49.02608121492242, 199.3179390253924, 48.946274459683984, 48.946274459683984,
    # 48.946274459683984], 230: [200.40485829959516, 200.40485829959516, 199.3179390253924, 48.946274459683984,
    # 48.946274459683984, 48.946274459683984], 235: [200.0412371134021, 200.40485829959516, 199.3179390253924,
    # 48.946274459683984, 48.946274459683984, 48.946274459683984], 240: [48.95351888106242, 49.12803062526584,
    # 48.95351888106242, 201.01384016133045, 48.946274459683984], 245: [196.01055949142042, 49.12803062526584,
    # 48.95351888106242, 201.01384016133045, 48.946274459683984], 250: [78.61132417920767, 200.8917478810635,
    # 48.95351888106242, 201.01384016133045], 255: [217.97022436569515, 200.8917478810635, 201.01384016133045]}

    # test = {0: [194.1694462975317, 95.03193198291737, 96.89726346627604, 96.89726346627604, 96.89726346627604,
    # 97.21053264398219], 5: [95.27831244844246, 95.03193198291737, 96.89726346627604, 96.89726346627604,
    # 96.89726346627604, 97.21053264398219], 10: [97.90110998990917, 97.15342403567567, 96.89726346627604,
    # 96.89726346627604, 96.89726346627604, 97.21053264398219], 15: [97.01094564507314, 97.15342403567567,
    # 97.23911213267229, 96.89726346627604, 96.89726346627604, 97.21053264398219], 20: [96.8688845401174,
    # 97.23911213267229, 97.23911213267229, 97.95910125065629, 96.89726346627604, 97.21053264398219],
    # 25: [96.47331786542924, 97.23911213267229, 97.23911213267229, 97.95910125065629, 99.22274493761506,
    # 97.21053264398219], 30: [100.00274864972582, 100.03299377242546, 100.03299377242546, 97.95910125065629,
    # 99.22274493761506, 100.03299377242546], 35: [99.31212381771282, 100.03299377242546, 100.03299377242546,
    # 97.95910125065629, 99.22274493761506, 100.03299377242546], 40: [100.58055152394775, 100.24522297381074,
    # 100.03299377242546, 99.22274493761506, 99.22274493761506, 100.03299377242546], 45: [99.22274493761506,
    # 100.24522297381074, 99.04446894524071, 99.22274493761506, 99.22274493761506, 100.03299377242546],
    # 50: [100.73371634249324, 99.04446894524071, 99.04446894524071, 99.22274493761506, 99.04446894524071,
    # 100.03299377242546], 55: [99.64122858668712, 99.04446894524071, 99.04446894524071, 99.22274493761506,
    # 99.04446894524071, 100.03299377242546], 60: [98.42551637381811, 99.19298771760023, 99.16324834080596,
    # 99.16324834080596, 99.04446894524071, 99.16324834080596], 65: [100.24522297381074, 99.19298771760023,
    # 99.16324834080596, 99.16324834080596, 99.04446894524071, 99.16324834080596], 70: [99.07413710940159,
    # 94.59705412046125, 99.16324834080596, 99.16324834080596, 99.04446894524071, 99.16324834080596],
    # 75: [186.82122775937768, 94.59705412046125, 188.84794061924165, 99.16324834080596, 188.95582850762162,
    # 99.16324834080596], 80: [195.08565913295263, 191.47172591637505, 188.84794061924165, 194.97065995016214,
    # 188.95582850762162, 99.16324834080596], 85: [176.54979983015895, 191.47172591637505, 188.84794061924165,
    # 194.97065995016214, 188.95582850762162, 99.16324834080596], 90: [53.34325447734387, 211.82789438444297,
    # 214.8551687483391, 194.97065995016214, 188.95582850762162, 157.39438904631092], 95: [211.82789438444297,
    # 211.82789438444297, 214.8551687483391, 194.97065995016214, 188.95582850762162, 157.39438904631092],
    # 100: [141.32144729942317, 44.47113180909774, 214.8551687483391, 157.4693241576316, 157.4693241576316,
    # 157.39438904631092], 105: [78.77984084880636, 44.47113180909774, 157.4693241576316, 157.4693241576316,
    # 157.4693241576316, 157.39438904631092], 110: [153.2378645888175, 157.4693241576316, 157.4693241576316,
    # 157.4693241576316, 157.4693241576316, 157.39438904631092], 115: [156.2050533456411, 157.4693241576316,
    # 157.4693241576316, 157.4693241576316, 157.4693241576316, 157.39438904631092], 120: [157.02078073412312,
    # 158.14696485623003, 156.27885999012048, 156.27885999012048, 157.4693241576316, 156.2050533456411],
    # 125: [158.29834446450715, 158.14696485623003, 156.27885999012048, 156.27885999012048, 156.2050533456411,
    # 156.2050533456411], 130: [156.50069899989248, 156.2050533456411, 156.27885999012048, 156.27885999012048,
    # 156.2050533456411, 156.2050533456411], 135: [157.17001101583256, 156.2050533456411, 156.2050533456411,
    # 156.27885999012048, 156.2050533456411, 156.2050533456411], 140: [155.61710045125002, 78.07319663952103,
    # 156.2050533456411, 156.42668271814605, 156.2050533456411, 156.2050533456411], 145: [156.2050533456411,
    # 78.07319663952103, 156.2050533456411, 156.42668271814605, 156.2050533456411, 156.2050533456411],
    # 150: [155.32478066898628, 156.42668271814605, 156.42668271814605, 156.42668271814605, 156.42668271814605,
    # 156.42668271814605], 155: [157.4693241576316, 156.42668271814605, 156.42668271814605, 156.42668271814605,
    # 156.42668271814605, 156.42668271814605], 160: [156.9462718115739, 155.9105225943305, 156.42668271814605,
    # 157.09536043524255, 156.42668271814605, 156.42668271814605], 165: [155.8370633713833, 155.9105225943305,
    # 156.42668271814605, 157.09536043524255, 156.42668271814605, 156.42668271814605], 170: [156.57478535924085,
    # 157.54433065581225, 156.42668271814605, 157.09536043524255, 156.42668271814605, 156.42668271814605],
    # 175: [157.4693241576316, 157.54433065581225, 156.42668271814605, 157.09536043524255, 157.09536043524255,
    # 156.42668271814605], 180: [158.07138357265438, 154.88835437110197, 158.14696485623003, 155.3977576081153,
    # 157.09536043524255, 155.10626052480123], 185: [154.02281819528818, 154.88835437110197, 158.14696485623003,
    # 155.3977576081153, 157.09536043524255, 155.10626052480123], 190: [156.57478535924085, 77.87100157315155,
    # 158.14696485623003, 155.3977576081153, 157.09536043524255, 155.10626052480123], 195: [77.87100157315155,
    # 77.87100157315155, 155.10626052480123, 155.3977576081153, 157.09536043524255, 155.10626052480123],
    # 200: [155.10626052480123, 155.10626052480123, 155.10626052480123, 155.17903222366766, 156.1313163823624,
    # 155.10626052480123], 205: [156.9462718115739, 155.10626052480123, 155.10626052480123, 155.17903222366766,
    # 156.1313163823624, 155.10626052480123], 210: [155.3977576081153, 156.7231687092119, 156.7231687092119,
    # 155.17903222366766, 156.1313163823624, 158.14696485623003], 215: [157.4693241576316, 156.7231687092119,
    # 156.7231687092119, 155.17903222366766, 156.1313163823624, 158.14696485623003], 220: [157.2447325769854,
    # 156.7231687092119, 156.7231687092119, 158.07138357265438, 156.1313163823624, 158.14696485623003],
    # 225: [77.48788669399924, 156.7231687092119, 158.07138357265438, 158.07138357265438, 158.07138357265438,
    # 158.14696485623003], 230: [159.28942010901687, 219.5618720014484, 158.07138357265438, 158.07138357265438,
    # 158.07138357265438, 158.14696485623003], 235: [40.89690484085813, 219.5618720014484, 158.07138357265438,
    # 158.07138357265438, 158.07138357265438, 158.14696485623003], 240: [41.233403788724495, 40.382598271814594,
    # 78.18392805337974, 49.018815302843514, 158.07138357265438, 195.77851319719105], 245: [64.15591743887708,
    # 40.382598271814594, 78.18392805337974, 49.018815302843514, 158.07138357265438, 195.77851319719105],
    # 250: [195.8944676268677, 196.01055949142042, 78.18392805337974, 49.018815302843514, 195.66269595848237,
    # 195.77851319719105], 255: [65.42497235184636, 196.01055949142042, 196.24315650368135, 49.018815302843514,
    # 195.66269595848237, 195.77851319719105], 260: [196.59308891470565, 196.47630619684082, 196.24315650368135,
    # 196.47630619684082, 195.66269595848237, 195.77851319719105], 265: [196.47630619684082, 196.47630619684082,
    # 196.24315650368135, 196.47630619684082, 195.66269595848237, 195.77851319719105], 270: [197.5323723430247,
    # 194.28350198915976, 194.51201582506886, 196.47630619684082, 195.66269595848237, 193.71455953997287],
    # 275: [194.1694462975317, 194.28350198915976, 194.51201582506886, 196.47630619684082, 193.37479071992348,
    # 193.71455953997287], 280: [193.37479071992348, 193.37479071992348, 194.51201582506886, 193.37479071992348,
    # 193.37479071992348, 193.71455953997287], 285: [189.0638397380934, 193.37479071992348, 195.5470156674102,
    # 193.37479071992348, 193.37479071992348, 193.71455953997287], 290: [197.76859728752754, 195.66269595848237,
    # 195.5470156674102, 193.37479071992348, 193.37479071992348, 193.71455953997287], 295: [193.71455953997287,
    # 195.66269595848237, 195.5470156674102, 193.37479071992348, 193.37479071992348, 193.71455953997287],
    # 300: [196.01055949142042, 193.71455953997287, 193.71455953997287, 190.80896813950443, 190.91910896544488,
    # 193.26179915540092], 305: [193.71455953997287, 193.71455953997287, 193.71455953997287, 190.80896813950443,
    # 190.91910896544488, 193.26179915540092], 310: [192.13910379974126, 190.58906728829987, 193.71455953997287,
    # 190.80896813950443, 190.91910896544488, 193.26179915540092], 315: [190.26016472741537, 190.58906728829987,
    # 192.36259814418275, 190.80896813950443, 190.91910896544488, 193.26179915540092], 320: [192.25078601812467,
    # 192.36259814418275, 192.36259814418275, 192.25078601812467, 190.91910896544488, 193.26179915540092],
    # 325: [193.26179915540092, 192.36259814418275, 192.36259814418275, 192.25078601812467, 195.08565913295263,
    # 193.26179915540092], 330: [195.20079405531564, 96.92565902521545, 96.92565902521545, 192.25078601812467,
    # 195.08565913295263, 195.20079405531564], 335: [193.14893955883525, 96.92565902521545, 96.92565902521545,
    # 192.25078601812467, 195.08565913295263, 195.20079405531564], 340: [193.82808129778113, 193.6011706797925,
    # 96.92565902521545, 193.6011706797925, 195.08565913295263, 195.20079405531564], 345: [193.6011706797925,
    # 193.6011706797925, 193.48791448400564, 193.6011706797925, 195.08565913295263, 195.20079405531564],
    # 350: [192.9236153458653, 193.6011706797925, 193.48791448400564, 193.6011706797925, 194.7410678442393,
    # 195.20079405531564], 355: [191.58263342197415, 193.6011706797925, 193.48791448400564, 193.6011706797925,
    # 194.7410678442393, 195.20079405531564], 360: [194.7410678442393, 193.03621169916434, 194.7410678442393,
    # 193.03621169916434, 194.7410678442393, 192.81115026895256], 365: [190.26016472741537, 193.03621169916434,
    # 194.7410678442393, 193.03621169916434, 194.7410678442393, 192.81115026895256], 370: [193.37479071992348,
    # 195.3160649577238, 194.7410678442393, 193.03621169916434, 194.7410678442393, 192.81115026895256],
    # 375: [195.3160649577238, 195.3160649577238, 194.1694462975317, 193.03621169916434, 194.1694462975317,
    # 192.81115026895256], 380: [194.3976917528252, 194.28350198915976, 194.1694462975317, 194.3976917528252,
    # 194.1694462975317, 192.81115026895256], 385: [193.37479071992348, 194.28350198915976, 194.1694462975317,
    # 194.3976917528252, 194.1694462975317, 192.81115026895256], 390: [98.39623534502576, 191.36094674556213,
    # 192.13910379974126, 194.3976917528252, 194.1694462975317, 192.25078601812467], 395: [188.95582850762162,
    # 191.36094674556213, 192.13910379974126, 194.3976917528252, 194.1694462975317, 192.25078601812467],
    # 400: [192.13910379974126, 192.13910379974126, 192.13910379974126, 193.14893955883525, 192.25078601812467,
    # 192.25078601812467], 405: [193.03621169916434, 192.13910379974126, 193.14893955883525, 193.14893955883525,
    # 192.25078601812467, 192.25078601812467], 410: [47.1126391235942, 193.26179915540092, 193.14893955883525,
    # 193.14893955883525, 192.25078601812467, 192.25078601812467], 415: [195.08565913295263, 193.26179915540092,
    # 193.14893955883525, 193.14893955883525, 192.25078601812467, 192.25078601812467], 420: [194.05552444195538,
    # 193.82808129778113, 194.28350198915976, 191.58263342197415, 192.25078601812467, 191.58263342197415],
    # 425: [193.71455953997287, 193.82808129778113, 194.28350198915976, 191.58263342197415, 191.58263342197415,
    # 191.58263342197415], 430: [191.47172591637505, 190.80896813950443, 194.28350198915976, 191.58263342197415,
    # 191.58263342197415, 191.58263342197415], 435: [190.80896813950443, 190.80896813950443, 190.4793068244287,
    # 191.58263342197415, 191.58263342197415, 191.58263342197415], 440: [190.36967271014834, 190.36967271014834,
    # 190.4793068244287, 157.02078073412312, 191.58263342197415, 191.58263342197415], 445: [176.73848096961456,
    # 190.36967271014834, 190.4793068244287, 157.02078073412312, 191.58263342197415, 191.58263342197415],
    # 450: [154.2382940839816, 157.09536043524255, 78.07319663952103, 157.02078073412312], 455: [157.09536043524255,
    # 157.09536043524255, 78.07319663952103, 157.02078073412312], 460: [155.32478066898628, 155.32478066898628,
    # 78.07319663952103], 465: [46.30142216283288, 155.32478066898628], 470: []}

    # processBPMS(test)
    # exit()

    maxWindowSize = 30
    step = 5
    stop = maxWindowSize + step

    endOfSong = len(samps) // fs

    for i in range(0, endOfSong, step):
        bpmsForTime[i] = []

    print(bpmsForTime)

    # start at step rather than 0 because we dont want to calculate window size of 0
    for window in range(step, stop, step):
        print("Get BPMs for window size " + str(window))
        bpms = get_bpms(samps, fs, window)
        print(bpms)
        for i in range(0, len(bpms)):
            bpm = bpms[i]
            startTime = i * window
            for time in range(startTime, startTime + window, step):
                print("BPM @ time " + str(time) + " = " + str(bpm))
                bpmsForTime[time].append(bpm)

    print(bpmsForTime)

    processBPMS(bpmsForTime)
